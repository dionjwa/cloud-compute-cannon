version: '2'

# volumes:
#   elasticsearch_data:
#     driver: local
#   local-storage:
#     driver: local

services:

  server:
    image: dionjwa/haxe-watch:v0.15.0
    cpu_shares: 1024
    # ports:
    #   - "9000:9000"
    expose:
      - 9000
    # Extra args for debugging: --inspect, --debug-brk
    command: ["nodemon", "-L", "-w", "server", "server/docker-cloud-compute-server.js"]
    depends_on:
      - redis
    working_dir: /app
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./build/server:/app/server
      - ./build/clients:/app/clients
      - ./src/web:/app/web
      - local-storage:/app/ccc-local-storage
      - ./package.json:/app/package.json
      - ./node_modules_docker:/app/node_modules
    environment:
      - PORT=9000
      - STORAGE_HTTP_PREFIX=http://ccc.local
      - REDIS_HOST=redis
      - VIRTUAL_HOST=ccc.local
      - LOG_LEVEL=debug
      - WORKER_STATUS_CHECK_INTERVAL_SECONDS=20
      - DISABLE_REQUEST_LOGS=true
      - DISABLE_WORKER=false
    networks:
      - dcc
    labels:
      ccc.type: "server"
      ccc.origin: "docker-compose"

  # Run the functional and scaling tests in a separate container
  ccc.tests:
    image: dionjwa/haxe-watch:v0.15.0
    working_dir: /app
    # Switch these when developing locally
    command: ["nodemon", "-L", "--watch", "build/test", "build/test/docker-cloud-compute-tester.js"]
    # command: ["node", "build/test/docker-cloud-compute-tester.js"]
    environment:
      - CCC=ccc.local
      - CCC_SCALING=ccc-scaling-server:4015
      - LOG_LEVEL=debug
      - REDIS_HOST=redis
      - TEST=${TEST}
      - TEST_SCALING=${TEST_SCALING}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./build:/app/build
      - ./node_modules_docker:/app/node_modules
    networks:
      - dcc
    depends_on:
      - ccc.local
      - redis
      - ccc-scaling-server

  redis:
    cpu_shares: 256
    restart: always
    image: redis:3.2.0-alpine
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6379"
    networks:
      - dcc
    volumes:
      - ./etc/redis/redis-dev.conf:/usr/local/etc/redis/redis.conf
    # logging:
    #   driver: none

  # Replicates (mocks) e.g. AWS AutoScalingGroups, by creating and destroying
  # workers based on the desired capacity.
  # Also used to test worker failure
  ccc-scaling-server:
    cpu_shares: 512
    image: dionjwa/haxe-watch:v0.15.0
    command: ["nodemon", "local-scaling-server/docker-cloud-compute-scaling-server.js"]
    working_dir: /app
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./build/local-scaling-server:/app/local-scaling-server
      - ./node_modules_docker:/app/node_modules
    environment:
      - PORT=4015
      - REDIS_HOST=redis
      - CCC=http://ccc.local
      - LOG_LEVEL=warn
    networks:
      - dcc
    ports:
      - "4015:4015"
    depends_on:
      - redis
      - ccc.local

  # The internal scaling service (mocks e.g. an AWS autoscaling group)
  # creates and destroys workers dynamically. This container detects
  # new workers and modifies the nginx config to reverse proxy the
  # workers a single API endpoint can be used.
  ccc.local:
    image: jwilder/nginx-proxy
    ports:
      - "127.0.0.1:8180:80"
    environment:
      - DEFAULT_HOST=ccc.local
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./etc/nginx/ccc.local.conf:/etc/nginx/vhost.d/ccc.local
      - ./etc/nginx/proxy.conf:/etc/nginx/proxy.conf
    depends_on:
      - server
    logging:
      driver: none
